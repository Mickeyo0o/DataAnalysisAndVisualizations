geom_smooth(aes(y = y1, color = 'czerwony')) +
geom_smooth(aes(y = y2, color = 'niebieski')) +
geom_smooth(aes(y = y3, color = 'zielony')) +
theme_bw() +
labs(x = "Czas t[min]", y = "delta m/s [g/nn^2]") +
scale_color_manual(name='Legenda',
breaks=c('czerwony', 'niebieski', 'zielony'),
values=c('czerwony'='red', 'niebieski'='blue', 'zielony'='green'))
p1
p2 <- ggplot(df1, aes(x = x)) +
geom_smooth(aes(y = y, color = column)) +
theme_bw() +
labs(x = "Czas t[min]", y = "delta m/s [g/nn^2]") +
scale_color_manual(name='Legenda',
breaks=c('y1', 'y2', 'y3'),
values=c('y1'='red', 'y2'='blue', 'y3'='green'))
p3 <- ggplot(df1, aes(x = x)) +
geom_smooth(aes(y = y2), color = 'blue') +
theme_bw() +
labs(x = "Czas t[min]", y = "delta m/s [g/nn^2]")
p4 <- ggplot(df1, aes(x = x)) +
geom_smooth(aes(y = y3), color = 'green') +
theme_bw() +
labs(x = "Czas t[min]", y = "delta m/s [g/nn^2]")
p2
p2 <- ggplot(df2, aes(x = x)) +
geom_smooth(aes(y = y, color = column)) +
theme_bw() +
labs(x = "Czas t[min]", y = "delta m/s [g/nn^2]") +
scale_color_manual(name='Legenda',
breaks=c('y1', 'y2', 'y3'),
values=c('y1'='red', 'y2'='blue', 'y3'='green'))
p2
p2 <- ggplot(df2, aes(x = x)) +
geom_smooth(aes(y = y, color = column)) +
theme_bw() +
labs(x = "Czas t[min]", y = "delta m/s [g/nn^2]") +
scale_color_manual(name='Legenda',
breaks=c('y1', 'y2', 'y3'),
values=c('y1'='red', 'y2'='blue', 'y3'='green')) +
facet_grid(. ~color)
p2
p2 <- ggplot(df2, aes(x = x, color = column)) +
geom_smooth(aes(y = y, color = column)) +
theme_bw() +
labs(x = "Czas t[min]", y = "delta m/s [g/nn^2]") +
scale_color_manual(name='Legenda',
breaks=c('y1', 'y2', 'y3'),
values=c('y1'='red', 'y2'='blue', 'y3'='green')) +
facet_grid(. ~color)
p2
p2 <- ggplot(df2, aes(x = x, color = column)) +
geom_smooth(aes(y = y, color = column)) +
theme_bw() +
labs(x = "Czas t[min]", y = "delta m/s [g/nn^2]") +
scale_color_manual(name='Legenda',
breaks=c('y1', 'y2', 'y3'),
values=c('y1'='red', 'y2'='blue', 'y3'='green')) +
facet_grid(. ~column)
p2
p2 <- ggplot(df2, aes(x = x, color = column)) +
geom_smooth(aes(y = y, color = column)) +
theme_bw() +
labs(x = "Czas t[min]", y = "delta m/s [g/nn^2]") +
scale_color_manual(name='Legenda',
breaks=c('y1', 'y2', 'y3'),
values=c('y1'='red', 'y2'='blue', 'y3'='green')) +
facet_grid(. ~column, scales = 'free')
p2
p1 <- ggplot(df1, aes(x = x)) +
geom_smooth(aes(y = y1, color = 'czerwony')) +
geom_smooth(aes(y = y2, color = 'niebieski')) +
geom_smooth(aes(y = y3, color = 'zielony')) +
theme_bw() +
labs(x = "Czas t[min]", y = "delta m/s [g/nn^2]") +
scale_color_manual(name='Legenda',
breaks=c('czerwony', 'niebieski', 'zielony'),
values=c('czerwony'='red', 'niebieski'='blue', 'zielony'='green'))
p1
p2 <- ggplot(df2, aes(x = x, color = column)) +
geom_smooth(aes(y = y, color = column)) +
theme_bw() +
labs(x = "Czas t[min]", y = "delta m/s [g/nn^2]") +
facet_grid(. ~column, scales = 'free') +
scale_color_manual(name='Legenda',
breaks=c('y1', 'y2', 'y3'),
values=c('y1'='red', 'y2'='blue', 'y3'='green'))
p2
p2 <- ggplot(df2, aes(x = x, color = column)) +
geom_smooth(aes(y = y, color = column)) +
theme_bw() +
labs(x = "Czas t[min]", y = "delta m/s [g/nn^2]") +
facet_grid(. ~column, scales = 'free_y') +
scale_color_manual(name='Legenda',
breaks=c('y1', 'y2', 'y3'),
values=c('y1'='red', 'y2'='blue', 'y3'='green'))
p2
df1 <- data.frame(name = df$userName, time = df$at, content = df$content,
score = df$score, thumbs = df$thumbsUpCount) %>%
filter(thumbs >= max(.$thumbs) * (1-0.8))
df = read.csv("reviews.csv")
setwd("C:/Users/HP/Desktop/Pliki/School/Semester 4/Data Visualization/Lab 5/Assignment/datavizDashboard")
df = read.csv("reviews.csv")
df1 <- data.frame(name = df$userName, time = df$at, content = df$content,
score = df$score, thumbs = df$thumbsUpCount) %>%
filter(thumbs >= max(.$thumbs) * (1-0.8))
library(plotly)
library(dplyr)
library(ggplot2)
library(zoo)
df = read.csv("reviews.csv")
df1 <- data.frame(name = df$userName, time = df$at, content = df$content,
score = df$score, thumbs = df$thumbsUpCount) %>%
filter(thumbs >= max(.$thumbs) * (1-0.8))
View(df1)
df1 <- data.frame(name = df$userName, time = df$at, content = df$content,
score = df$score, thumbs = df$thumbsUpCount) %>%
filter(thumbs >= max(.$thumbs) * (1-0.6))
df1 <- data.frame(name = df$userName, time = df$at, content = df$content,
score = df$score, thumbs = df$thumbsUpCount) %>%
filter(thumbs >= max(.$thumbs) * (1-0.2))
df1 <- data.frame(name = df$userName, time = df$at, content = df$content,
score = df$score, thumbs = df$thumbsUpCount) %>%
filter(thumbs >= max(.$thumbs) * (1-0.9))
library(ggExtra)
# The mtcars dataset is proposed in R
head(mtcars)
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none")
ggplotly(p)
df1 <- data.frame(name = df$userName, time = df$at, content = df$content,
score = df$score, thumbs = df$thumbsUpCount) %>%
filter(thumbs >= max(.$thumbs) * (1-0.9)) %>%
mutate(time = str_extract(time, "^[^\\s]+")) %>%
mutate(time = as.Date(time))
library(stringr)
df = read.csv("reviews.csv")
df1 <- data.frame(name = df$userName, time = df$at, content = df$content,
score = df$score, thumbs = df$thumbsUpCount) %>%
filter(thumbs >= max(.$thumbs) * (1-0.9)) %>%
mutate(time = str_extract(time, "^[^\\s]+")) %>%
mutate(time = as.Date(time))
View(df1)
library(stringr)
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
scale_x_date(date_labels = "%Y-%m-%d")
ggplotly(p)
df1 <- data.frame(name = df$userName, time = df$at, content = df$content,
score = df$score, thumbs = df$thumbsUpCount) %>%
filter(thumbs >= max(.$thumbs) * (1-0.95)) %>%
mutate(time = str_extract(time, "^[^\\s]+")) %>%
mutate(time = as.Date(time))
library(ggExtra)
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
scale_x_date(date_labels = "%Y-%m-%d")
ggplotly(p)
shiny::runApp()
runApp()
df1 <- data.frame(name = df$userName, time = df$at, content = df$content,
score = df$score, thumbs = df$thumbsUpCount) %>%
filter(thumbs > 0) %>%
filter(thumbs >= max(.$thumbs) * (1-0.95)) %>%
mutate(time = str_extract(time, "^[^\\s]+")) %>%
mutate(time = as.Date(time))
library(ggExtra)
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
scale_x_date(date_labels = "%Y-%m-%d")
ggplotly(p)
data <- data.frame(name = reactiveVals$filteredData$userName,
time = reactiveVals$filteredData$at,
content = reactiveVals$filteredData$content,
score = reactiveVals$filteredData$score,
thumbs = reactiveVals$filteredData$thumbsUpCount) %>%
filter(thumbs >= max(.$thumbs) * (1-0.95) && thumbs > 0) %>%
mutate(time = str_extract(time, "^[^\\s]+")) %>%
mutate(time = as.Date(time))
runApp()
runApp()
p <- ggMarginal(p, type="density")
df = read.csv("reviews.csv")
df1 <- data.frame(name = df$userName, time = df$at, content = df$content,
score = df$score, thumbs = df$thumbsUpCount) %>%
filter(thumbs > 0) %>%
filter(thumbs >= max(.$thumbs) * (1-0.95)) %>%
mutate(time = str_extract(time, "^[^\\s]+")) %>%
mutate(time = as.Date(time))
library(ggExtra)
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
scale_x_date(date_labels = "%Y-%m-%d")
p <- ggMarginal(p, type="density")
ggplotly(p)
p2 <- ggMarginal(p, type="density")
p2
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
scale_x_date(date_labels = "%Y-%m-%d")
p2 <- ggMarginal(p, type="density")
p2
p2 <- ggMarginal(p, type="density", size = 10)
p2
p2 <- ggMarginal(p, type="density", size = 10, margins = y)
p2
p2 <- ggMarginal(p, type="density", size = 10, margins = 'y')
p2
ggplotly(p2)
ggMarginal(p, type="density")
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
scale_x_date(date_labels = "%Y-%m-%d")
ggMarginal(p, type="density")
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
scale_x_date(date_labels = "%Y-%m-%d") +
ggMarginal(p, type="density", size = 10, margins = 'y')
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
scale_x_date(date_labels = "%Y-%m-%d") +
ggMarginal(., type="density", size = 10, margins = 'y')
ggplotly(p)
p = ggplotly(p)
p2 = ggplot(p2)
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
scale_x_date(date_labels = "%Y-%m-%d") +
p2 <- ggMarginal(p, type="density", size = 10, margins = 'y')
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
scale_x_date(date_labels = "%Y-%m-%d") +
p2 <- ggMarginal(p, type="density", size = 10, margins = 'y')
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
scale_x_date(date_labels = "%Y-%m-%d") +
p2 <- ggMarginal(p, type="density", size = 10, margins = 'y')
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
scale_x_date(date_labels = "%Y-%m-%d")
p2 <- ggMarginal(p, type="density", size = 10, margins = 'y')
p2 = ggplot(p2)
runApp()
df = read.csv("reviews.csv")
df1 <- data.frame(name = df$userName, time = df$at, content = df$content,
score = df$score, thumbs = df$thumbsUpCount) %>%
filter(thumbs > 0) %>%
filter(thumbs >= max(.$thumbs) * (1-0.95)) %>%
mutate(time = str_extract(time, "^[^\\s]+")) %>%
mutate(time = as.Date(time))
library(ggExtra)
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
scale_x_date(date_labels = "%Y-%m-%d")
p2 <- ggplot(df1, aes(x = score)) +
geom_density(fill = "lightblue", color = "black") +
theme_minimal() +
ylab("Density")
# Combine 'p' and 'p2' by modifying 'p' to include 'p2'
combined_plot <- ggplotly(p +
annotation_custom(ggplotlyGrob(p2), xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf))
combined_plot <- ggplotly(p) %>%
add_trace(data = ggplot_build(p2)$data[[1]], inherit = FALSE)
# Display the combined plot
combined_plot
classic_plot <- ggplotly(p)
# Convert 'p2' to a Plotly object
density_plot <- ggplotly(p2)
# Combine the two plots using 'plot_ly'
combined_plot <- plot_ly() %>%
add_trace(data = classic_plot$x$data[[1]], type = "scatter", mode = "markers", inherit = FALSE) %>%
add_trace(data = density_plot$x$data[[1]], type = "scatter", mode = "lines", inherit = FALSE)
combined_plot
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
scale_x_date(date_labels = "%Y-%m-%d")
p2 <- ggplot(df1, aes(x = score)) +
geom_density(fill = "lightblue", color = "black") +
theme_minimal() +
ylab("Density")
p2
p2 <- ggMarginal(p, type="density", size = 10, margins = 'y')
p2
p2 <- ggplot(df1, aes(x = score)) +
geom_density(fill = "lightblue", color = "black") +
theme_minimal() +
ylab("Density")
p2
ggplotly(p2)
p = ggplotly(p)
p2 <- ggplotly(p2)
final = subplot(p, p2)
final
p2 <- ggplot(df1, aes(y = score)) +
geom_density(fill = "lightblue", color = "black") +
theme_minimal() +
ylab("Density")
p2 <- ggplotly(p2)
p2 <- ggplot(df1, aes(y = score, x = ...)) +
geom_density(fill = "lightblue", color = "black") +
theme_minimal() +
ylab("Density")
p2 <- ggplot(df1, aes(y = score)) +
geom_density(fill = "lightblue", color = "black") +
theme_minimal() +
ylab("Density")
p2 <-  layout(xaxis = list(orientation = 'h'),
yaxis = list(orientation = 'v'))
p2 <- ggplot(df1, aes(y = score)) +
geom_density(fill = "lightblue", color = "black") +
theme_minimal() +
ylab("Density")
p2 <- ggplotly(p2)
p2 <-  layout(xaxis = list(orientation = 'h'),
yaxis = list(orientation = 'v'))
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
scale_x_date(date_labels = "%Y-%m-%d")
p2 <- ggMarginal(p, type="density", size = 10, margins = 'y')
p2
p2 = ggplot(p2)
p2 <- ggplot(df1, aes(y = score)) +
geom_density(fill = "lightblue", color = "black") +
theme_minimal() +
ylab("Density")
p2 <- ggplotly(p2)
p2 <- ggplot(df1, aes(y = score)) +
geom_density(fill = "lightblue", color = "black") +
theme_minimal()
p2 <- ggplotly(p2)
p2 <- ggplot(df1, aes(x = score)) +
geom_density(fill = "lightblue", color = "black") +
theme_minimal() +
ylab("Density")
p2 <- ggplotly(p2)
p2 <-  layout(xaxis = list(orientation = 'v'),
yaxis = list(orientation = 'h'))
p2 <- ggplotly(p2) %>%
layout(xaxis = list(orientation = 'v'),
yaxis = list(orientation = 'h'))
p2
p2 <- ggplotly(p2) %>%
layout(xaxis = list(orientation = 'h'),
yaxis = list(orientation = 'v'))
p2
p2 <- ggplot(df1, aes(x = score, y = NULL)) +
geom_density(fill = "lightblue", color = "black") +
theme_minimal() +
xlab("Density")
# Display the plot with switched axes
p2
p2 <- ggplot(df1, aes(y = score, x = NULL)) +
geom_density(fill = "lightblue", color = "black") +
theme_minimal() +
xlab("Density")
# Display the plot with switched axes
p2
p2 <- ggplot(df1, aes(x = score)) +
geom_density(fill = "lightblue", color = "black") +
theme_minimal() +
ylab("Density")
p2
p2 <- ggplotly(p2)
# Modify the layout of p2
p2 <- p2 %>%
layout(xaxis = list(side = "top"),
yaxis = list(side = "right"),
orientation = 270)
# Display the rotated plot
p2
# Modify the layout of p2
p2 <- p2 %>%
layout(xaxis = list(side = "top"),
yaxis = list(side = "right"),
orientation = 270,
autosize = FALSE,
width = 600,
height = 600)
# Display the rotated plot
p2
p2 <- ggplot(df1, aes(x = score)) +
geom_density(fill = "lightblue", color = "black") +
theme_minimal() +
ylab("Density") +
cord_flip()
p2 <- ggplot(df1, aes(x = score)) +
geom_density(fill = "lightblue", color = "black") +
theme_minimal() +
ylab("Density") +
coord_flip()
p2
p2 <- ggplotly(p2)
p2
p2 <- ggplot(df1, aes(x = score)) +
geom_density(fill = "lightblue", color = "black") +
theme_void() +
ylab("Density") +
coord_flip()
p2
p2 <- ggplotly(p2)
p2
final = subplot(p, p2)
final
final = subplot(p, p2, margin = 0)
final
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
theme_void +
scale_x_date(date_labels = "%Y-%m-%d")
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
theme_void +
scale_x_date(date_labels = "%Y-%m-%d")
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
theme_void +
scale_x_date(date_labels = "%Y-%m-%d")
library(plotly)
library(dplyr)
library(ggplot2)
library(zoo)
library(stringr)
df = read.csv("reviews.csv")
df1 <- data.frame(name = df$userName, time = df$at, content = df$content,
score = df$score, thumbs = df$thumbsUpCount) %>%
filter(thumbs > 0) %>%
filter(thumbs >= max(.$thumbs) * (1-0.95)) %>%
mutate(time = str_extract(time, "^[^\\s]+")) %>%
mutate(time = as.Date(time))
library(ggExtra)
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
theme_void +
scale_x_date(date_labels = "%Y-%m-%d")
p2 <- ggMarginal(p, type="density", size = 10, margins = 'y')
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
theme_void() +
scale_x_date(date_labels = "%Y-%m-%d")
p = ggplotly(p)
p2 <- ggplot(df1, aes(x = score)) +
geom_density(fill = "lightblue", color = "black") +
theme_void() +
ylab("Density") +
coord_flip()
p2 <- ggplotly(p2)
final = subplot(p, p2, margin = 0)
final
# classic plot :
p <- ggplot(df1, aes(x=time, y=score, size=thumbs)) +
geom_point() +
theme(legend.position="none") +
theme_minimal() +
scale_x_date(date_labels = "%Y-%m-%d")
p = ggplotly(p)
p2 <- ggplot(df1, aes(x = score)) +
geom_density(fill = "lightblue", color = "black") +
theme_void() +
ylab("Density") +
coord_flip()
p2 <- ggplotly(p2)
p2
final = subplot(p, p2, margin = 0)
final
p2.update_xaxes(visible=False)
p2 <- p2 %>% layout(xaxis = list(title = "", showticklabels = FALSE, showgrid = FALSE),
yaxis = list(title = "", showticklabels = FALSE, showgrid = FALSE))
# Display the updated plot
p2
runApp()
